/*
Call by Value와 Call by Reference 차이
*/

// 작성만 했다면 0번 (함수 껍데기만 쓴 상황)
// add10 함수: data1은 값 타입, data2는 참조 타입
// 호출한 함수의 값과 주소가 그대로 복사 됨 (d1 -> data1, d2[0] -> data2)
function add10(data1, data2) { // 3번: 호출한 함수 가져와서 사용
  data1 += 10;
  data2[0] += 10;
  console.log('함수 내부', data1, data2[0]); // 90 90
} // 함수 내부에서 선언한 data1, data2는 함수가 출력된 후에는 데이터가 삭제 됨
// return data1을 해서 값을 받는 경우가 있다면, 값이 바뀜. 하지만 받는 게 없으면 바뀌지 않음.

// 1번
let d1 = 80; // 원시 타입 number
let d2 = [ 80 ]; // 참조 타입 array(object)

// 함수 호출 이전 출력
console.log("함수 호출 이전", d1, d2[0]); // 80 80


// 2번 => 0번 data1, data2 매개 변수 자리로 들어가서 실행
// add10 함수 호출
add10(d1, d2);


// 4번
// 기본 데이터 타입은 호출하고 출력한게 기존 값을 복사한 것이기 때문에 원본인 80은 영향이 없다.
// 다만 참조 타입은 호출할 때 참조하는 주소만 복사하기 때문에 원본에 영향을 줌
// 함수 호출 이후 출력
console.log("함수 호출 이후", d1, d2[0]); // 80 90