(() => {
/*
배열 생성, 읽기, 쓰기
*/

// const arr = new Array(1, 2, 3); // [1, 2, 3] 생성 'Array 생성자 함수'
const arr = [1, 2, 3]; // 리터럴 방식
// 지정한 데이터를 배열의 마지막 요소로 추가한다.
arr.push(10); // [1, 2, 3, 10] index로 치면 0, 1, 2, 3까지 있는 상태
arr[4] = 20; // index 데이터 5번째 추가 (숫자가 0부터 시작하니깐) [1, 2, 3, 10, 20]
arr[5] = 30; // index 데이터 6번째 추가 (숫자가 0부터 시작하니깐) [1, 2, 3, 10, 20, 30]
arr[1] = 100; // 같은 배열에 값이 있으면 기존 값이 바뀜 [1, 100, 3, 10, 20, 30]
arr[9] = 200; // [1, 100, 3, 10, 20, 30, , , , 200]
// 배열의 마지막에 새로운 데이터 추가
// arr[10]을 쓰는 건 길이가 짧은 코딩일 때나 가능함.
// 하드 코딩하지 않고 아래와 같이 새로운 데이터 추가할 수 있음!
arr[arr.length] = 300; // length에 값 할당하는 방법
arr.push(400); // arr[arr.length] 대신 배열 메소드 push를 사용한게 쉬움

// length는 마지막 index +1이 된다. 개수가 아니다.
console.log('배열의 길이', arr.length); // arr(객체).length(속성)에 접근
console.log('배열의 마지막 값', arr[arr.length-1]);
console.log(typeof arr, arr); // typeof 연산자로 꺼내면 : object [] 출력
})();
